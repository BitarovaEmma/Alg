using System;

namespace lab6
{

    class Program
    {
        class Node
        {
            public int data;
            public Node left;
            public Node right;
            public Node(int data)
            {
                this.data = data;
            }
        }

        class BinaryTree
        {
            public Node Root { get; set; }

            public bool Add(int value)
            {
                Node before = null, after = Root;

                while (after != null)
                {
                    before = after;
                    if (value < after.data)
                        after = after.left;
                    else if (value > after.data)
                        after = after.right;
                    else
                    {
                        return false;
                    }
                }

                Node newNode = new Node(value);

                if (Root == null)
                    Root = newNode;
                else
                {
                    if (value < before.data)
                        before.left = newNode;
                    else
                        before.right = newNode;
                }

                return true;
            }

            public Node Find(int value)
            {
                return Find(value, Root);
            }

            public void Delete(int value)
            {
                Root = Delete(Root, value);
            }

            private Node Delete(Node parent, int key)
            {
                if (parent == null) return parent;

                if (key < parent.data) parent.left = Delete(parent.left, key);
                else if (key > parent.data)
                    parent.right = Delete(parent.right, key);

                else
                {
                    if (parent.left == null)
                        return parent.right;
                    else if (parent.right == null)
                        return parent.left;

                    parent.data = MinValue(parent.right);

                    parent.right = Delete(parent.right, parent.data);
                }

                return parent;
            }

            private int MinValue(Node node)
            {
                int minv = node.data;

                while (node.left != null)
                {
                    minv = node.left.data;
                    node = node.left;
                }

                return minv;
            }

            private Node Find(int value, Node parent)
            {
                if (parent != null)
                {
                    if (value == parent.data) return parent;
                    if (value < parent.data)
                        return Find(value, parent.left);
                    else
                        return Find(value, parent.right);
                }

                return null;
            }
        }

        class AVL
        {
            Node root;
            public AVL()
            {
            }
            public void Add(int data)
            {
                Node newItem = new Node(data);
                if (root == null)
                {
                    root = newItem;
                }
                else
                {
                    root = Insert(root, newItem);
                }
            }
            private Node Insert(Node cur, Node n)
            {
                if (cur == null)
                {
                    cur = n;
                    return cur;
                }
                else if (n.data < cur.data)
                {
                    cur.left = Insert(cur.left, n);
                    cur = balance_tree(cur);
                }
                else if (n.data > cur.data)
                {
                    cur.right = Insert(cur.right, n);
                    cur = balance_tree(cur);
                }
                return cur;
            }
            private Node balance_tree(Node cur)
            {
                int b_factor = balance_factor(cur);
                if (b_factor > 1)
                {
                    if (balance_factor(cur.left) > 0)
                    {
                        cur = RotateLL(cur);
                    }
                    else
                    {
                        cur = RotateLR(cur);
                    }
                }
                else if (b_factor < -1)
                {
                    if (balance_factor(cur.right) > 0)
                    {
                        cur = RotateRL(cur);
                    }
                    else
                    {
                        cur = RotateRR(cur);
                    }
                }
                return cur;
            }
            public void Delete(int target)
            {
                root = Delete(root, target);
            }
            private Node Delete(Node cur, int target)
            {
                Node parent;
                if (cur == null)
                { return null; }
                else
                {
                    if (target < cur.data)
                    {
                        cur.left = Delete(cur.left, target);
                        if (balance_factor(cur) == -2)//here
                        {
                            if (balance_factor(cur.right) <= 0)
                            {
                                cur = RotateRR(cur);
                            }
                            else
                            {
                                cur = RotateRL(cur);
                            }
                        }
                    }
                    else if (target > cur.data)
                    {
                        cur.right = Delete(cur.right, target);
                        if (balance_factor(cur) == 2)
                        {
                            if (balance_factor(cur.left) >= 0)
                            {
                                cur = RotateLL(cur);
                            }
                            else
                            {
                                cur = RotateLR(cur);
                            }
                        }
                    }
                    else
                    {
                        if (cur.right != null)
                        {
                            parent = cur.right;
                            while (parent.left != null)
                            {
                                parent = parent.left;
                            }
                            cur.data = parent.data;
                            cur.right = Delete(cur.right, parent.data);
                            if (balance_factor(cur) == 2)//rebalancing
                            {
                                if (balance_factor(cur.left) >= 0)
                                {
                                    cur = RotateLL(cur);
                                }
                                else { cur = RotateLR(cur); }
                            }
                        }
                        else
                        {
                            return cur.left;
                        }
                    }
                }
                return cur;
            }
            public bool Find(int key)
            {
                if (Find(key, root).data == key)
                {
                    return true;
                }
                return false;
            }
            private Node Find(int target, Node cur)
            {
                if (cur == null)
                {
                    return new Node(target - 1);
                }
                if (target < cur.data)
                {
                    if (target == cur.data)
                    {
                        return cur;
                    }
                    else
                        return Find(target, cur.left);
                }
                else
                {
                    if (target == cur.data)
                    {
                        return cur;
                    }
                    else
                        return Find(target, cur.right);
                }

            }
            private int max(int l, int r)
            {
                return l > r ? l : r;
            }
            private int getHeight(Node cur)
            {
                int height = 0;
                if (cur != null)
                {
                    int l = getHeight(cur.left);
                    int r = getHeight(cur.right);
                    int m = max(l, r);
                    height = m + 1;
                }
                return height;
            }
            private int balance_factor(Node cur)
            {
                int l = getHeight(cur.left);
                int r = getHeight(cur.right);
                int b_factor = l - r;
                return b_factor;
            }
            private Node RotateRR(Node parent)
            {
                Node pivot = parent.right;
                parent.right = pivot.left;
                pivot.left = parent;
                return pivot;
            }
            private Node RotateLL(Node parent)
            {
                Node pivot = parent.left;
                parent.left = pivot.right;
                pivot.right = parent;
                return pivot;
            }
            private Node RotateLR(Node parent)
            {
                Node pivot = parent.left;
                parent.left = RotateRR(pivot);
                return RotateLL(parent);
            }
            private Node RotateRL(Node parent)
            {
                Node pivot = parent.right;
                parent.right = RotateLL(pivot);
                return RotateRR(parent);
            }
        }

        static int intPow(int a, int b)
        {
            int output = 1;
            for (int i = 0; i < b; i++)
            {
                output *= a;
            }
            return output;
        }

        static double[] test(int[] arr)
        {
            Random rand = new Random();
            double[] output = new double[7];
            BinaryTree bt = new BinaryTree();
            AVL avl = new AVL();

            DateTime start = DateTime.Now;
            foreach (int child in arr)
            {
                bt.Add(child);
            }
            TimeSpan ts1 = DateTime.Now - start;
            output[0] = ts1.TotalSeconds;

            start = DateTime.Now;
            foreach (int child in arr)
            {
                avl.Add(child);
            }
            ts1 = DateTime.Now - start;
            output[1] = ts1.TotalSeconds;

            double total1 = 0;
            double total2 = 0;
            double total3 = 0;
            for (int i = 0; i < 1000; i++)
            {
                int toFind = rand.Next();
                start = DateTime.Now;
                bt.Find(toFind);
                total1 += (DateTime.Now - start).TotalMilliseconds;

                start = DateTime.Now;
                avl.Find(toFind);
                total2 += (DateTime.Now - start).TotalMilliseconds;

                start = DateTime.Now;
                Array.FindIndex(arr, temp1 => temp1 == toFind);
                total3 += (DateTime.Now - start).TotalMilliseconds;
            }
            output[2] = total1 / 1000;
            output[3] = total2 / 1000;
            output[4] = total3 / 1000;

            total1 = 0;
            total2 = 0;
            for (int i = 0; i < 1000; i++)
            {
                int todelete = rand.Next();
                start = DateTime.Now;
                bt.Delete(todelete);
                total1 += (DateTime.Now - start).TotalMilliseconds;

                start = DateTime.Now;
                avl.Delete(todelete);
                total2 += (DateTime.Now - start).TotalMilliseconds;
            }
            output[5] = total1 / 1000;
            output[6] = total2 / 1000;

            return output;
        }

        static void printDoubleArr(double[][] inp)
        {
            foreach (double[] row in inp)
            {
                foreach (double cell in row)
                {
                    Console.Write(String.Format("{0:0.00000}", cell) + '\t');
                }
                Console.WriteLine();
            }
        }

        static void Main(string[] args)
        {
            double[][] output1 = new double[7][];
            double[][] output2 = new double[7][];
            double[] temp1 = new double[7];
            double[] temp2 = new double[7];
            for (int i = 0; i < 7; i++)
            {
                output1[i] = new double[10];
                output2[i] = new double[10];
            }
            Random rand = new Random();
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    Console.WriteLine(String.Format("Тест №{0} серии №{1}", j, i));
                    int[] inp = new int[intPow(2, 10 + i)];
                    for (int k = 0; k < intPow(2, 10 + k); k++)
                    {
                        inp[k] = rand.Next();
                    }
                    double[] toprint = test(inp);
                    for (int i1 = 0; i1 < 7; i1++)
                    {
                        temp1[i1] += toprint[i1];
                    }
                }

                for (int j = 0; j < 10; j++)
                {
                    Console.WriteLine(String.Format("Тест №{0} серии №{1}", j + 10, i));
                    int[] inp = new int[intPow(2, 10 + i)];
                    for (int k = 0; k < intPow(2, 10 + k); k++)
                    {
                        inp[k] = k;
                    }
                    double[] toprint = test(inp);
                    for (int i1 = 0; i1 < 7; i1++)
                    {
                        temp2[i1] += toprint[i1];
                    }
                }
                for (int i1 = 0; i1 < 7; i1++)
                {
                    output1[i1][i] = temp1[i1] / 7;
                    output2[i1][i] = temp2[i1] / 7;
                }
            }
            printDoubleArr(output1);
            Console.WriteLine();
            printDoubleArr(output2);
        }
    }
}

